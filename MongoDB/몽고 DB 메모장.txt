몽고 DB 메모장

몽고DB 시작하기------------------------------------------------
cmd를 열고 mongod 실행    
mongod --dbpath 폴더명 : 데이터 디렉토리 사용 폴더 지정
mongod -- port 번호 : 연결 포트 지정
mongod --logpath 파일명 : 모든 출력을 콘솔에 표시 안하고 지정한 파일로 출력
mongod --help : 옵션 설명

Window powershell 실행 -> mongosh  입력
여기서 앞으로 명령어 사용한다.
use <db> : 처음에 test 인데 <db>로 데이터베이스 변경 (없으면 생성)
show dbs : db 목록 출력
show collections : 현재 db의 collections 목록 출력
show users : 현재 db 사용자 출력
db.dropDatabase() : 현재 db 삭제
db.stats() : 현재 db 상태 출력
db.CreateUser(user) : 새로운 사용자(user 칸) 생성
db.dropUser(user) : user 라는 이름의 사용자 삭제
db.dropAllUser() : 현 db 모든 유저 삭제
db.getUser(name) : name의 사용자 정보 출력
db.updateUser(name, user) : name의 사용자 정보 수정

 test> use admin
 switched to db admin
 admin> db.createUser({user: 'nodejs', pwd: '1234', roles: ['root'] })
 { ok: 1 }  라고 뜨면 어드민 생성 완료

재시작 : mongod --auth 하면 Access control 활성화 / mongsh admin -u nodejs -p 1234로 하면 admin으로 접속
-----------------------------------------------------------------
Insert Documents-------------------------------
db.collection.insertOne(<document>)
One 이 있고 Many가 있다.
db에 추가하는 역할

ex) db.products.insertOne({item:"card",qty:15})
products 라는 collection 에 item이 card 고 qty가 15인 document 생성  , 여긴 _id 필드가 없으니 추가
db.products.insertOne({_id 1, item:"card", qty:15}) 이 된다.
_id 필드가 있으면 이 products 라는 collection 내에선 중복값 없어야 된다.

db.products.insertMany([{ item: "card", qty : 15}, {item:"phone",qty : 20 }]);
배열 [] 로 시작, id 자동 줌
id를 줄 경우 실수하면  일부 오류 발생의 경우가 있음.
ex) id 13 이 두 개 넣으면 하나만 추가되고 멈춘다.
그러나 마지막에 {ordered:false} 를 넣으면 오류 나는 부분은 빼고 다음을 계속 넣음
---------------------------------------------------------
Query Documents----------------------------------------
db.collection.find() 메서드이다.
db.collection.find(query,projection,options)
query 는 where - find 조건 어디서? 생략/{} 이면 모든 걸 다 가져와라.
projection = select - 어떤 걸 가져오냐?
db.a.find({status:'D'}) = a에서 어디서든 status가 D 인 녀석을 가져와라.

간단한 검색
status: {$in: ["A","D"]} == status가 A 이거나 D인 애를 가져와라.
status: "A" , qty {$lt:30}    status가 A 이면서 qty가 30보다 작은 애를 가져와라. < 30 / 반대는 gt  > 30
{ $or: [ { status : "A"} , {qty: {$lt:30}}]}   A이거나 30보다 작은 애 => 배열로 써야함.
{status : "A", $or : [{qty:{$lt:30},{item : {$regex:'^p'}}]}
A 이면서 qty가 30보다 적거나 item이 p로 시작하는 거!

document를 값으로 가지는 연산  **순서도 중요하다.
db.a.find({size: {h:14,w:21,uom:"cm"}}
Nested field에 대한 질의
db.a.find({"size.uom":"in"})    uom이 in 인걸 찾아라! ** " " 로 감싸줘야함.
db.a.find({"size.h" : {$lt:15}, "size.uom" :"in", status : "D"})  AND로 다 붙인.

만약 20보다 작은 놈이 없어야 한다 면 $not: {$lte:20} 을 쓰면 된다.
db.a.find({dim cm: {$gt : 15 , $lt 20}}) 이러면 각 조건을 하나라도 만족하는 애가 있으면 된다.
만약 저기서 $elemMatch: {gt:15,$lt 20} 이면? 2개의 조건을 다 만족하는 원소를 찾아라. -> 15보다 크고 20보다 작은 원소가 있는 애를 찾아라.

원소의 인덱스를 통한 질의 -> 원소 인덱스는 0부터 시작이기에 두번째 원소는 1이다.
ex) db.a.find({"test_cm.1":21}) 두번째 원소
배열의 원소 수 알기
({tags : {$size:3}})  -> $size 연산자 사용

특정 필드와 _id필드만 출력을 원한다면?
db.a.find({status:"A"} , {item:1,status:1})  <- _id는 기본 출력
이러면 아이템 필드 1개와 status 필드 1개를 출력한다 , + _id:0 을 넣으면 id가 안나옴\
**단 _id 0 을 제외하곤  다른 필드는 1과 0이 혼용 안된다.
ex) item : 0 , status 1  이렇게 하면 에러
--------------------------------------------------------------
Update Documents -----------------------------------------
db.collection.updateOne(<filter>,<update>,<option>)
filter 는 where 어디에?  find의 query 역할 
update 는 update로 set 무엇을?
One 을 Many로 바꾸면 필터에 충족하는 모든 document 수정
db.collection.replaceOne(<filter>,<replacement>,<option>)
filter 와 일치하는 첫 document의 내용을 변경
이건 update 연산이 아니라 단순한 document 덮어쓰기다.

db.inventory.updateOne(
 {item:"paper"}, 
{ $set:{"size.uom":"cm", status:"P"}, 
$currentDate:{lastModified: true} // true:Date format으로저장
}) item 이 paper 인 걸 size.uom을 cm으로 바꾸고 status 를 P로 바꿔라.
---------------------------------------------------------------
db.sales.find()
db.sales.find({location:"대구"})
db.sales.find({"items.name":"연필","items.name":"노트"})
db.sales.find({"items":{$elemMatch:{name:"라면",price:5000}}})
db.sales.find({"items":{$elemMatch:{name:"휴대폰",price:{$gt:1000000}}}})
db.sales.find({date:{$gte:ISODate("2023-04-01"), $lt:ISODate("2023-05-01")}})
db.sales.find({"items.name":"소주"},{customer:1}) / db.sales.find({"items.name":"소주"},{customer:1, _id 0})
db.sales.find({"customer.gender":"M", $or: [{"customer.age":{$gte:10,$lte:19}},{"customer.age":{$gte:50,$lte:59}}]})
db.sales.find({items:{$size:1}})
db.sales.find({location:"부산"},{date:1,items:1})



---------------------집계 연산 - Aggregation  사용 가능한 연산자 알아보려면 Aggregation Operators 검색
예전 mysql에선 group by를 하려면 여러 document를 묶어주려는 개념이 있었다. 이걸 의미
여러 document를 group by나 join 하는 기능 
pipeline - 연산이 여러 개 있는데 스테이지처럼 처리 (스테이지마다 동작 정의)
예시
db.companies.aggregate([  // 배열로 줘서 각각이 스테이지가 된다.
 {$match: {founded_year: 2004}}, 	// 2004년에설립된회사를검색
{$sort: {name: 1}}, 	// name 필드의오름차순으로정렬
{$skip: 10}, 		// 앞의10개document는skip
 {$limit: 5}, 		// 최종결과를5개로제한
{$project: { _id: 0,  name: 1}},		 // 회사이름만출력document에반영
])  조건에 의해 최종 5개만 나옴

{ $match: {<query>}}  = 다음 조건에 맞는 쿼리만 가져와라.
{ $count : <string> }  = 입력한 결과의 갯수를 가져와라.
{ $limit  : <positive 64-bit integer> } 다음 단계로 넘길 document의 갯수를 제한
{ $skip : <positive 64-bit integer>} 다음 갯수  만큼 skip 하고 이후의 document를 다음 단계로 넘김
{ $project : {<specification(s)>}}
<field> : <1 or true>    필드를 document에 추가
_id : <0 or false> _id 필드를 document에서 제외
<field> : <expression> 새 필드를 추가 / 리셋
<field> : <0 or false > 필드를 document에서 제외  추가와 같이 사용 불가

$unset - 그 필드를 제거해라? 제외해라.  => project 에서 0 하는 거랑 같음.
{$sort : {<field1>: 오름차순/내림차순 , <field2> : 오름차순내림차순>}
1이면 오름차순이고 -1이면 내림차순이다.  , 앞이 우위이다.
{ $group : {_id: <expression>, <field1>:{<accumulator1> : <expression1>} ...}}
group by 와 똑같은데 조금 더 몽고 db에 맞음.
특정 속성 명을 적어주면 같은 거 끼리 모아줌 , 만약 null이나 상수면 모든 document를 하나의 group으로
accumulator 는 count avg sum min max 등... 여러 가지 있음 
$first : 그룹 첫 / $last : 그룹 마지막 / $top : 정렬시 첫 값 / $bottom : 정렬시 마지막 결과
$push : 각 그룹 값으로 구성된 배열 리턴 / $addToSet : 각 그룹 유일 값들로 구성된 배열 리턴
push로 하면 중복이 허용된다.

$lookup 
join을 할 경우 사용하는데 left outer join이다.
{ $lookup : {
	from : <같은 db속 join할 collection>.
	localField : <입력 document의 join attribute>,
	foreginField:<"from" collection 의 join attribute>,
	as:<output arrayfield>
}  이런 형태로 적게 되는데. 아래는 예시이다.
db.a.insertMany( [
 { "_id" : 1, "sku" : "milk", "instock" : 120 },
 { "_id" : 2, "sku" : "bread", "instock" : 80 },
 { "_id" : 3, "sku" : "water", "instock" : 60 }]);

db.b.insertMany( [
 { "_id" : 1, "item" : "milk", "price" : 12, "quantity" : 2 },
 { "_id" : 2, "item" : "bread", "price" : 20, "quantity" : 1 },
 { "_id" : 3, "item" : "milk", "price" : 20, "quantity" : 10 },
 { "_id" : 4, "item" : "milk", "price" : 20, "quantity" : 8 } ] );

이 두 개를 lookup 할 경우
db.inventory.aggregate([ 
	{$lookup: { 
	from: "orders", 
	localField: "sku", 
	foreignField: "item", 
	as: "order_docs"} 
	}
 ])  이렇게 적으면 
{_id : 1 , sku : 'milk',instock:120, order_docs : [ 밀크 3개..] 하고 이런 식으로 나온다.
_id :2 ... [ bread 정보]
_id : 3 [ b에는 water가 없으므로 없음]  
이게 left outer join 이라서 a가 다 나왔지만 만약 a와 b가 반대였다면 water는 없었다.